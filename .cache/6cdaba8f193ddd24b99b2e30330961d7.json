{"dependencies":[{"name":"js_libs/jquery/dist/jquery.js","loc":{"line":1,"column":14}},{"name":"./log","loc":{"line":2,"column":16}},{"name":"./env","loc":{"line":3,"column":16}},{"name":"fg-loadjs","loc":{"line":4,"column":19}},{"name":"./emitter","loc":{"line":5,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _jquery = require(\"js_libs/jquery/dist/jquery.js\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _log = require(\"./log\");\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _env = require(\"./env\");\n\nvar _env2 = _interopRequireDefault(_env);\n\nvar _fgLoadjs = require(\"fg-loadjs\");\n\nvar _fgLoadjs2 = _interopRequireDefault(_fgLoadjs);\n\nvar _emitter = require(\"./emitter\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Singleton\nlet _instance = null;\n\n/**\n *\n * @public\n * @class Analytics\n * @classdesc Handles Google Analytics.\n *            @see {@link https://developers.google.com/analytics/devguides/collection/analyticsjs/}\n * @memberof core\n *\n */\nclass Analytics {\n  constructor() {\n    if (!_instance) {\n      this.devUA = \"\";\n      this.prodUA = \"\";\n      this.GAScript = \"//www.google-analytics.com/analytics.js\";\n      this.GAUATag = _env2.default.isDev() ? this.devUA : this.prodUA;\n\n      this.initGoogleAnalytics();\n\n      _emitter2.default.on(\"app--analytics-push\", this.pushTrack.bind(this));\n\n      // log( \"Analytics initialized\", this );\n\n      _instance = this;\n    }\n\n    return _instance;\n  }\n\n  /**\n   *\n   * @public\n   * @method initGoogleAnalytics\n   * @memberof core.Analytics\n   * @description Build GA interface and load analytics.js.\n   *\n   */\n  initGoogleAnalytics() {\n    if (_instance) {\n      return;\n    }\n\n    // Setup GA Interface\n    window.GoogleAnalyticsObject = \"ga\";\n    window.ga = window.ga || function () {\n      // Blockers like `Privacy Badger` will blow GA up here\n      // https://www.eff.org/privacybadger\n      try {\n        window.ga.q = (window.ga.q || []).push(arguments);\n      } catch (error) {\n        // log( \"warn\", \"GA Error\", error );\n      }\n    };\n    window.ga.l = Number(new Date());\n\n    // Load GA Javascript\n    (0, _fgLoadjs2.default)(this.GAScript, () => {\n      // log( \"Analytics GA loaded\" );\n\n      window.ga(\"create\", this.GAUATag, \"auto\");\n      window.ga(\"send\", \"pageview\");\n    });\n  }\n\n  /**\n   *\n   * @public\n   * @method track\n   * @memberof core.Analytics\n   * @description Track Squarespace Metrics since we are ajax-routing.\n   *\n   */\n  track() {\n    // log( \"Analytics track pageview\" );\n\n    // Google Analytics\n    window.ga(\"send\", \"pageview\", window.location.href);\n  }\n\n  /**\n   *\n   * @public\n   * @method pushTrack\n   * @param {string} html The full responseText from an XHR request\n   * @param {Hobo} $doc Optional document node to receive and work with\n   * @memberof core.Analytics\n   * @description Parse static context from responseText and track it.\n   *\n   */\n  pushTrack(html, $doc) {\n    let $title = null;\n\n    $doc = $doc || (0, _jquery2.default)(html);\n    $title = $doc.find(\"title\");\n\n    if (!$title.length) {\n      $title = $doc.filter(\"title\");\n    }\n\n    this.track();\n\n    this.setDocumentTitle($title[0].innerText);\n  }\n\n  /**\n   *\n   * @public\n   * @method setDocumentTitle\n   * @param {string} title The new title for the document\n   * @memberof core.Analytics\n   * @description Update the documents title.\n   *\n   */\n  setDocumentTitle(title) {\n    document.title = title;\n  }\n}\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = Analytics;"},"hash":"2f22c209352b81f06d02977d342c325b"}