{"dependencies":[{"name":"./log","loc":{"line":1,"column":16}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _log = require(\"./log\");\n\nvar _log2 = _interopRequireDefault(_log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Singleton\nlet _instance = null;\nlet _initialized = false;\n\n// Session Storage\nlet _cache = {};\nconst _access = \"app-cache\";\nconst _session = window.sessionStorage;\n\n/**\n *\n * @public\n * @class Store\n * @param {object} options The Store settings\n * @classdesc Handles how data / content is cached and stored for webapp.\n *\n */\nclass Store {\n  constructor(options) {\n    if (!_instance) {\n      _instance = this;\n\n      this._opts = options;\n      this._init();\n    }\n\n    return _instance;\n  }\n\n  /**\n   *\n   * @private\n   * @instance\n   * @method _init\n   * @memberof Store\n   * @description One time Store initialization\n   *\n   */\n  _init() {\n    if (_initialized) {\n      return;\n    }\n\n    _initialized = true;\n\n    this.flush();\n\n    // log( \"Singleton Store initialized\", this );\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method flush\n   * @memberof Store\n   * @description Manually flush the Local Storage cache\n   *\n   */\n  flush() {\n    // New empty cache\n    _cache = {};\n\n    // Store the new cache object\n    this.save();\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method save\n   * @memberof Store\n   * @description Perform the actual synchronous write to Local Storage\n   *\n   */\n  save() {\n    if (!this._opts.enableStorage || !Store.isStorageSupported) {\n      // log( \"Cache Storage disabled - Not writing to SessionStorage\" );\n      return;\n    }\n\n    _session.setItem(_access, JSON.stringify(_cache));\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method slug\n   * @param {string} uri The string to slugify\n   * @memberof Store\n   * @description Slug a uri string\n   * @returns {string}\n   *\n   */\n  slug(uri) {\n    uri = uri.replace(/^\\/|\\/$/g, \"\").replace(/\\/|\\?|\\&|=|\\s/g, \"-\").toLowerCase();\n    uri = uri === \"\" ? \"homepage\" : uri;\n\n    return uri;\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method set\n   * @param {string} id The index key\n   * @param {mixed} val The value to store\n   * @memberof Store\n   * @description Set a key's value in the cache\n   *\n   */\n  set(id, val) {\n    id = this.slug(id);\n\n    _cache[id] = val;\n\n    this.save();\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method get\n   * @param {string} id The index key\n   * @memberof Store\n   * @description Get a key's value from the cache\n   * @returns {mixed}\n   *\n   */\n  get(id) {\n    id = id && this.slug(id);\n\n    return id ? this.getValue(_cache[id]) : _cache;\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method getValue\n   * @param {mixed} val The accessed value\n   * @memberof Store\n   * @description Get a value so cache is non-mutable from outside\n   * @returns {mixed}\n   *\n   */\n  getValue(val) {\n    const ret = val;\n\n    return ret;\n  }\n\n  /**\n   *\n   * @public\n   * @instance\n   * @method remove\n   * @param {string} id The index key\n   * @memberof Store\n   * @description Remove a key/val pair from the cache\n   *\n   */\n  remove(id) {\n    delete _cache[id];\n  }\n}\n\n/**\n *\n * @public\n * @static\n * @member isStorageSupported\n * @memberof Store\n * @description Boolean to test local/session storage support\n *\n */\nStore.isStorageSupported = function () {\n  let ret = true;\n\n  try {\n    _session.setItem(\"app-test\", 1);\n    _session.removeItem(\"app-test\");\n  } catch (err) {\n    ret = false;\n  }\n\n  return ret;\n}();\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = Store;"},"hash":"83f4723bb6691d4dc0b46655c8e4598e"}