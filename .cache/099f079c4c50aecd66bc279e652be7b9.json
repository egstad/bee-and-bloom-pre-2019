{"dependencies":[{"name":"./util","loc":{"line":1,"column":22}},{"name":"./log","loc":{"line":2,"column":16}},{"name":"properjs-controller","loc":{"line":3,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require(\"./util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _log = require(\"./log\");\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _properjsController = require(\"properjs-controller\");\n\nvar _properjsController2 = _interopRequireDefault(_properjsController);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n *\n * @public\n * @class ImageController\n * @param {Hobo} $images The image collection to load\n * @classdesc Handles breaking out the preload vs lazyload batches\n * @memberof core\n *\n */\nclass ImageController extends _properjsController2.default {\n  constructor($images) {\n    super();\n\n    this.$preload = util.getElementsInView($images);\n    this.$lazyload = $images.not(this.$preload);\n\n    if (this.$preload.length) {\n      this.handlePreload();\n    } else {\n      this.fire(\"preload\");\n    }\n\n    if (this.$lazyload.length) {\n      this.handleLazyload();\n    }\n  }\n\n  /**\n   *\n   * @public\n   * @method handlePreload\n   * @memberof core.ImageController\n   * @description ImageLoader instance for preload batch.\n   *\n   */\n  handlePreload() {\n    // log( \"ImageController preload queue:\", this.$preload.length );\n\n    this.preLoader = util.loadImages(this.$preload, util.noop);\n    this.preLoader.on(\"done\", () => {\n      // log( \"ImageController preloaded:\", this.$preload.length );\n\n      this.fire(\"preload\");\n    });\n  }\n\n  /**\n   *\n   * @public\n   * @method handleLazyload\n   * @memberof core.ImageController\n   * @description ImageLoader instance for lazyload batch.\n   *\n   */\n  handleLazyload() {\n    // log( \"ImageController lazyload queue:\", this.$lazyload.length );\n\n    this.lazyLoader = util.loadImages(this.$lazyload, util.isElementLoadable);\n    this.lazyLoader.on(\"done\", () => {\n      // log( \"ImageController lazyloaded:\", this.$lazyload.length );\n\n      this.fire(\"lazyload\");\n    });\n  }\n}\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = ImageController;"},"hash":"e31d03faf6847205a133cd2383f7b9ac"}