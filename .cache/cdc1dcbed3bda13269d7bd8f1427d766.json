{"dependencies":[{"name":"./dom","loc":{"line":1,"column":16}},{"name":"./log","loc":{"line":2,"column":16}},{"name":"./detect","loc":{"line":3,"column":19}},{"name":"./emitter","loc":{"line":4,"column":20}},{"name":"./scroller","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _dom = require(\"./dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _log = require(\"./log\");\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _detect = require(\"./detect\");\n\nvar _detect2 = _interopRequireDefault(_detect);\n\nvar _emitter = require(\"./emitter\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _scroller = require(\"./scroller\");\n\nvar _scroller2 = _interopRequireDefault(_scroller);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet _timeout = null;\nlet _isSuppressed = false;\nlet _isSuppressedEvents = false;\nconst _idleout = 300;\n\n/**\n *\n * @public\n * @namespace scrolls\n * @memberof core\n * @description Handles app-wide emission of various scroll detection events.\n *\n */\nconst scrolls = {\n  /**\n   *\n   * @public\n   * @method init\n   * @memberof core.scrolls\n   * @description Method runs once when window loads.\n   *\n   */\n  init() {\n    _scroller2.default.on(\"scroll\", onScroller);\n    _scroller2.default.on(\"scrollup\", onScrollerUp);\n    _scroller2.default.on(\"scrolldown\", onScrollerDown);\n\n    onScroller();\n\n    this.topout();\n\n    // log( \"scrolls initialized\" );\n  },\n\n  /**\n   *\n   * @public\n   * @method topout\n   * @param {number} top Optionally, the scroll position to apply\n   * @memberof core.scrolls\n   * @description Method set scroll position to argument value or zero.\n   *\n   */\n  topout(top) {\n    top = top || 0;\n\n    window.scrollTo(0, top);\n  },\n\n  /**\n   *\n   * @public\n   * @method suppress\n   * @param {boolean} bool Whether or not to suppress\n   * @memberof core.scrolls\n   * @description Method will suppress scroll position broadcasting.\n   *\n   */\n  suppress(bool) {\n    _isSuppressed = bool;\n  },\n\n  /**\n   *\n   * @public\n   * @method clearStates\n   * @memberof core.scrolls\n   * @description Method removes all applied classNames from this module\n   *\n   */\n  clearStates() {\n    _dom2.default.html.removeClass(\"is-scrolling-up is-scrolling-down is-scrolling\");\n  },\n\n  /**\n   *\n   * @public\n   * @method isScrollInRange\n   * @memberof core.scrolls\n   * @description Method determines if scroll is within range\n   * @returns {boolean}\n   *\n   */\n  isScrollInRange() {\n    const scrollPos = _scroller2.default.getScrollY();\n\n    return scrollPos > 0 || scrollPos < _scroller2.default.getScrollMax();\n  },\n\n  /**\n   *\n   * @public\n   * @method isScrollOutOfRange\n   * @memberof core.scrolls\n   * @description Method determines if scroll is out of range\n   * @returns {boolean}\n   *\n   */\n  isScrollOutOfRange() {\n    const scrollPos = _scroller2.default.getScrollY();\n\n    return scrollPos <= 0 || scrollPos >= _scroller2.default.getScrollMax();\n  }\n};\n\n/**\n *\n * @private\n * @method broadcast\n * @param {string} event The scroll event to emit\n * @param {number} position The current scroll position\n * @memberof core.scrolls\n * @description Method will emit scroll position information.\n *\n */\nconst broadcast = function (event, position) {\n  if (_isSuppressed) {\n    return;\n  }\n\n  _emitter2.default.fire(event, position);\n};\n\n/**\n *\n * @private\n * @method suppressEvents\n * @param {number} scrollPos The current scrollY position\n * @memberof core.scrolls\n * @description Method applies className to disable events while scrolling\n *\n */\nconst suppressEvents = function (scrollPos) {\n  if (_detect2.default.isStandalone()) {\n    return;\n  }\n\n  try {\n    clearTimeout(_timeout);\n  } catch (error) {\n    // log( error );\n  }\n\n  if (!_isSuppressedEvents) {\n    _isSuppressedEvents = true;\n\n    _dom2.default.html.addClass(\"is-scrolling\");\n\n    broadcast(\"app--scroll-start\", scrollPos);\n  }\n\n  _timeout = setTimeout(() => {\n    if (scrollPos === _scroller2.default.getScrollY()) {\n      _isSuppressedEvents = false;\n\n      _dom2.default.html.removeClass(\"is-scrolling\");\n\n      broadcast(\"app--scroll-end\", scrollPos);\n    }\n  }, _idleout);\n};\n\n/**\n *\n * @private\n * @method onScrollerUp\n * @memberof core.scrolls\n * @description Method handles upward scroll event\n *\n */\nconst onScrollerUp = function () {\n  if (!scrolls.isScrollInRange() || _detect2.default.isStandalone()) {\n    return;\n  }\n\n  const scrollPos = _scroller2.default.getScrollY();\n\n  broadcast(\"app--scroll-up\", scrollPos);\n\n  _dom2.default.html.removeClass(\"is-scrolling-down\").addClass(\"is-scrolling-up\");\n};\n\n/**\n *\n * @private\n * @method onScrollerDown\n * @memberof core.scrolls\n * @description Method handles downward scroll event\n *\n */\nconst onScrollerDown = function () {\n  if (!scrolls.isScrollInRange() || _detect2.default.isStandalone()) {\n    return;\n  }\n\n  const scrollPos = _scroller2.default.getScrollY();\n\n  broadcast(\"app--scroll-down\", scrollPos);\n\n  _dom2.default.html.removeClass(\"is-scrolling-up\").addClass(\"is-scrolling-down\");\n};\n\n/**\n *\n * @private\n * @method onScroller\n * @memberof core.scrolls\n * @description Method handles regular scroll event via [ScrollController]{@link https://github.com/ProperJS/ScrollController}\n *\n */\nconst onScroller = function () {\n  if (!scrolls.isScrollInRange() || _detect2.default.isStandalone()) {\n    return;\n  }\n\n  const scrollPos = _scroller2.default.getScrollY();\n\n  suppressEvents(scrollPos);\n\n  broadcast(\"app--scroll\", scrollPos);\n};\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = scrolls;"},"hash":"1d3ae5dc1582e89d57750e1f0392b52b"}