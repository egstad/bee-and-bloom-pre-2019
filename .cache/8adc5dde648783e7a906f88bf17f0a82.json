{"dependencies":[{"name":"./dom","loc":{"line":1,"column":16}},{"name":"./util","loc":{"line":2,"column":22}},{"name":"./log","loc":{"line":3,"column":16}},{"name":"./config","loc":{"line":4,"column":19}},{"name":"properjs-imageloader","loc":{"line":5,"column":24}},{"name":"./ImageController","loc":{"line":6,"column":28}},{"name":"./emitter","loc":{"line":7,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _dom = require(\"./dom\");\n\nvar _dom2 = _interopRequireDefault(_dom);\n\nvar _util = require(\"./util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar _log = require(\"./log\");\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _config = require(\"./config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _properjsImageloader = require(\"properjs-imageloader\");\n\nvar _properjsImageloader2 = _interopRequireDefault(_properjsImageloader);\n\nvar _ImageController = require(\"./ImageController\");\n\nvar _ImageController2 = _interopRequireDefault(_ImageController);\n\nvar _emitter = require(\"./emitter\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @public\n * @namespace images\n * @memberof core\n * @description Handles separation of image pre-loading and image lazy-loading.\n *\n */\nconst images = {\n  /**\n   *\n   * @public\n   * @method init\n   * @memberof core.images\n   * @description Method runs once when window loads.\n   *\n   */\n  init() {\n    // log( \"images initialized\" );\n  },\n\n  /**\n   *\n   * @public\n   * @method isActive\n   * @memberof core.images\n   * @description Method informs PageController of active status.\n   * @returns {boolean}\n   *\n   */\n  isActive: util.noop,\n\n  /**\n   *\n   * @public\n   * @method onload\n   * @memberof core.images\n   * @description Method performs onloading actions for this module.\n   *\n   */\n  onload() {\n    this.handleImages();\n  },\n\n  /**\n   *\n   * @public\n   * @method unload\n   * @memberof core.images\n   * @description Method performs unloading actions for this module.\n   *\n   */\n  unload() {\n    _properjsImageloader2.default.killInstances();\n  },\n\n  /**\n   *\n   * @public\n   * @method handlePreload\n   * @memberof core.images\n   * @param {function} callback The passed callback from `handleImages`\n   * @description Method handles the `done` preloading event cycle.\n   *\n   */\n  handlePreload(callback) {\n    if (typeof callback === \"function\") {\n      callback();\n    }\n\n    _emitter2.default.fire(\"app--preload-done\");\n  },\n\n  /**\n   *\n   * @public\n   * @method handleImages\n   * @memberof core.images\n   * @param {object} $images Optionally, the image collection to load\n   * @param {function} callback Optionally, a callback to fire when loading is done\n   * @description Method handles separation of pre-load and lazy-load.\n   *\n   */\n  handleImages($images, callback) {\n    $images = $images || _dom2.default.page.find(_config2.default.lazyImageSelector);\n\n    if ($images.length) {\n      const imageController = new _ImageController2.default($images);\n\n      imageController.on(\"preload\", this.handlePreload.bind(this, callback));\n\n      imageController.on(\"lazyload\", () => {\n        _emitter2.default.fire(\"app--lazyload-done\");\n      });\n    } else {\n      this.handlePreload(callback);\n    }\n  }\n};\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = images;"},"hash":"71189150fe6b573231d680c2f7fe8411"}