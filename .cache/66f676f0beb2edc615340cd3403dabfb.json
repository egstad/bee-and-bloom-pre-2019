{"dependencies":[{"name":"paramalama","loc":{"line":20,"column":30}}],"generated":{"js":"/*!\n *\n * Handles wildcard route matching against urls with !num and !slug condition testing\n *\n * @MatchRoute\n * @author: kitajchuk\n *\n */\n(function ( factory ) {\n    \n    if ( typeof exports === \"object\" && typeof module !== \"undefined\" ) {\n        module.exports = factory();\n\n    } else if ( typeof window !== \"undefined\" ) {\n        window.MatchRoute = factory();\n    }\n    \n})(function () {\n\n    var paramalama = require( \"paramalama\" ),\n\n    /**\n     *\n     * Handles wildcard route matching against urls with !num and !slug condition testing\n     * <ul>\n     * <li>route = \"/some/random/path/:myvar\"</li>\n     * <li>route = \"/some/random/path/:myvar!num\"</li>\n     * <li>route = \"/some/random/path/:myvar!slug\"</li>\n     * </ul>\n     * @constructor MatchRoute\n     * @memberof! <global>\n     * @requires paramalama\n     *\n     */\n    MatchRoute = function () {\n        return this.init.apply( this, arguments );\n    };\n    \n    MatchRoute.prototype = {\n        constructor: MatchRoute,\n        \n        /**\n         *\n         * Expression match http/https\n         * @memberof MatchRoute\n         * @member _rHTTPs\n         * @private\n         *\n         */\n        _rHTTPs: /^http[s]?:\\/\\/.*?\\//,\n        \n        /**\n         *\n         * Expression match trail slashes\n         * @memberof MatchRoute\n         * @member _rTrails\n         * @private\n         *\n         */\n        _rTrails: /^\\/|\\/$/g,\n        \n        /**\n         *\n         * Expression match hashbang/querystring\n         * @memberof MatchRoute\n         * @member _rHashQuery\n         * @private\n         *\n         */\n        _rHashQuery: /#.*$|\\?.*$/g,\n        \n        /**\n         *\n         * Expression match wildcards\n         * @memberof MatchRoute\n         * @member _rWild\n         * @private\n         *\n         */\n        _rWild: /^:/,\n        \n        /**\n         *\n         * Expressions to match wildcards with supported conditions\n         * @memberof MatchRoute\n         * @member _wilders\n         * @private\n         *\n         */\n        _wilders: {\n            num: /^[0-9]+$/,\n            slug: /^[A-Za-z]+[A-Za-z0-9-_.]*$/\n        },\n        \n        \n        /**\n         *\n         * MatchRoute init constructor method\n         * @memberof MatchRoute\n         * @method init\n         * @param {array} routes Config routes can be passed on instantiation\n         *\n         */\n        init: function ( routes ) {\n            /**\n             *\n             * The routes config array\n             * @memberof MatchRoute\n             * @member _routes\n             * @private\n             *\n             */\n            this._routes = ( routes ) ? this._cleanRoutes( routes ) : [];\n        },\n    \n        /**\n         *\n         * Get the internal route array\n         * @memberof MatchRoute\n         * @method MatchRoute.getRoutes\n         * @returns {array}\n         *\n         */\n        getRoutes: function () {\n            return this._routes;\n        },\n        \n        /**\n         *\n         * Update routes config array\n         * @memberof MatchRoute\n         * @method config\n         * @param {array} routes to match against\n         *\n         */\n        config: function ( routes ) {\n            // Force array on routes\n            routes = ( typeof routes === \"string\" ) ? [ routes ] : routes;\n    \n            this._routes = this._routes.concat( this._cleanRoutes( routes ) );\n            \n            return this;\n        },\n        \n        /**\n         *\n         * Test a url against a routes config for match validation\n         * @memberof MatchRoute\n         * @method test\n         * @param {string} url to test against routes\n         * @returns True or False\n         *\n         */\n        test: function ( url ) {\n            return this.parse( url, this._routes ).matched;\n        },\n        \n        /**\n         *\n         * Match a url against a routes config for matches\n         * @memberof MatchRoute\n         * @method params\n         * @param {string} url to test against routes\n         * @returns Array of matching routes\n         *\n         */\n        params: function ( url ) {\n            return this.parse( url, this._routes ).params;\n        },\n        \n        /**\n         *\n         * Compare a url against a specific route\n         * @memberof MatchRoute\n         * @method compare\n         * @param {string} route compare route\n         * @param {string} url compare url\n         * @returns MatchRoute.parse()\n         *\n         */\n        compare: function ( route, url ) {\n            return this.parse( url, [route] );\n        },\n        \n        /**\n         *\n         * Parse a url for matches against config array\n         * @memberof MatchRoute\n         * @method parse\n         * @param {string} url to test against routes\n         * @param {array} routes The routes to test against\n         * @returns Object witch match bool and matches array\n         *\n         */\n        parse: function ( url, routes ) {\n            var segMatches,\n                isStar,\n                params,\n                match,\n                route = this._cleanRoute( url ),\n                ruris,\n                regex,\n                cond,\n                uris = route.split( \"/\" ),\n                uLen = uris.length,\n                iLen = routes.length,\n                ret;\n            \n            for ( var i = 0; i < iLen; i++ ) {\n                // Flag \"*\" route\n                isStar = (routes[ i ] === \"*\");\n                \n                // Start fresh each iteration\n                // Only one matched route allowed\n                ret = {\n                    matched: false,\n                    route: null,\n                    uri: [],\n                    params: {},\n                    query: paramalama( url )\n                };\n                \n                ruris = routes[ i ].split( \"/\" );\n                \n                // Handle route === \"/\"\n                if ( route === \"/\" && routes[ i ] === \"/\" ) {\n                    ret.matched = true;\n                    ret.route = routes[ i ];\n                    ret.uri = \"/\";\n                    \n                    break;\n                }\n                \n                // If the actual url doesn't match the route in segment length,\n                // it cannot possibly be considered for matching so just skip it\n                if ( ruris.length !== uris.length && !isStar ) {\n                    continue;\n                }\n                \n                segMatches = 0;\n                \n                for ( var j = 0; j < uLen; j++ ) {\n                    // Matched a variable uri segment\n                    if ( this._rWild.test( ruris[ j ] ) ) {\n                        // Try to split on conditions\n                        params = ruris[ j ].split( \"!\" );\n                        \n                        // The variable segment\n                        match = params[ 0 ];\n                        \n                        // The match condition\n                        cond = params[ 1 ];\n                        \n                        // With conditions\n                        if ( cond ) {\n                            // We support this condition\n                            if ( this._wilders[ cond ] ) {\n                                regex = this._wilders[ cond ];\n                            }\n                            \n                            // Test against the condition\n                            if ( regex && regex.test( uris[ j ] ) ) {\n                                segMatches++;\n                                \n                                // Add the match to the config data\n                                ret.params[ match.replace( this._rWild, \"\" ) ] = uris[ j ];\n                                ret.uri.push( uris[ j ] );\n                            }\n                        \n                        // No conditions, anything goes   \n                        } else {\n                            segMatches++;\n                            \n                            // Add the match to the config data\n                            ret.params[ match.replace( this._rWild, \"\" ) ] = uris[ j ];\n                            ret.uri.push( uris[ j ] );\n                        }\n                    \n                    // Defined segment always goes   \n                    } else {\n                        if ( uris[ j ] === ruris[ j ] ) {\n                            segMatches++;\n                            \n                            ret.uri.push( uris[ j ] );\n                        }\n                    }\n                }\n                \n                // Handle a uri segment match OR \"*\" wildcard everything\n                if ( segMatches === uris.length || isStar ) {\n                    ret.matched = true;\n                    ret.route = routes[ i ];\n                    ret.uri = ( isStar ) ? route : ret.uri.join( \"/\" );\n                    \n                    break;\n                }\n            }\n            \n            return ret;\n        },\n        \n        /**\n         *\n         * Clean a route string\n         * If the route === \"/\" then it is returned as is\n         * @memberof MatchRoute\n         * @method _cleanRoute\n         * @param {string} route the route to clean\n         * @returns cleaned route string\n         * @private\n         *\n         */\n        _cleanRoute: function ( route ) {\n            if ( route !== \"/\" ) {\n                route = route.replace( this._rHTTPs, \"\" );\n                route = route.replace( this._rTrails, \"\" );\n                route = route.replace( this._rHashQuery, \"\" );\n                route = route.replace( this._rTrails, \"\" );\n            }\n            \n            if ( route === \"\" ) {\n                route = \"/\";\n            }\n            \n            return route;\n        },\n        \n        /**\n         *\n         * Clean an array of route strings\n         * @memberof MatchRoute\n         * @method _cleanRoutes\n         * @param {array} routes the routes to clean\n         * @returns cleaned routes array\n         * @private\n         *\n         */\n        _cleanRoutes: function ( routes ) {\n            for ( var i = routes.length; i--; ) {\n                routes[ i ] = this._cleanRoute( routes[ i ] );\n            }\n            \n            return routes;\n        }\n    };\n    \n    \n    return MatchRoute;\n\n\n});"},"hash":"6b3c126d535c25671752818816cafdd3"}