{"dependencies":[{"name":"./core","loc":{"line":1,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = require(\"./core\");\n\nvar core = _interopRequireWildcard(_core);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nlet $_jsElements = null;\nlet _isActive = false;\n\n/**\n *\n * @public\n * @namespace animate\n * @description Handle a site-wide default animation style for elements in view.\n *\n */\nconst animate = {\n  /**\n   *\n   * @public\n   * @method init\n   * @memberof animate\n   * @description Method runs once when window loads.\n   *\n   */\n  init() {\n    // core.log( \"animate initialized\" );\n\n    core.emitter.on(\"app--intro-art\", this.onIntroArt.bind(this));\n    core.emitter.on(\"app--update-animate\", this.onUpdateAnimate.bind(this));\n    core.emitter.on(\"app--pushed-route\", this.onUpdateAnimate.bind(this));\n  },\n\n  /**\n   *\n   * @public\n   * @method isActive\n   * @memberof animate\n   * @description Method informs PageController of active status.\n   * @returns {boolean}\n   *\n   */\n  isActive() {\n    return this.getElements() > 0;\n  },\n\n  /**\n   *\n   * @public\n   * @method onload\n   * @memberof animate\n   * @description Method performs onloading actions for this module.\n   *\n   */\n  onload() {\n    _isActive = true;\n\n    core.emitter.on(\"app--scroll\", updateAnimate);\n    core.emitter.on(\"app--resize\", updateAnimate);\n\n    updateAnimate();\n  },\n\n  /**\n   *\n   * @public\n   * @method unload\n   * @memberof animate\n   * @description Method performs unloading actions for this module.\n   *\n   */\n  unload() {\n    this.teardown();\n  },\n\n  /**\n   *\n   * @public\n   * @method teardown\n   * @memberof animate\n   * @description Method performs cleanup after this module. Remmoves events, null vars etc...\n   *\n   */\n  teardown() {\n    $_jsElements = null;\n    _isActive = false;\n  },\n\n  /**\n   *\n   * @public\n   * @method getElements\n   * @memberof animate\n   * @description Method queries DOM for this modules node.\n   * @returns {number}\n   *\n   */\n  getElements() {\n    $_jsElements = core.dom.page.find(\".js-animate\");\n\n    return $_jsElements.length;\n  },\n\n  /**\n   *\n   * @public\n   * @method onUpdateAnimate\n   * @memberof animate\n   * @description Handle updating node list and activating elements.\n   *\n   */\n  onUpdateAnimate() {\n    this.getElements();\n\n    if (!_isActive) {\n      this.onload();\n    }\n\n    updateAnimate();\n  },\n\n  /**\n   *\n   * @public\n   * @method onIntroArt\n   * @memberof animate\n   * @description Animate elements on the intro-art event.\n   *\n   */\n  onIntroArt() {\n    const $elems = $_jsElements.filter(\".js-animate--intro-art\");\n\n    if ($elems.length) {\n      $elems.addClass(\"is-active\");\n    }\n  }\n};\n\n/**\n *\n * @private\n * @method updateAnimate\n * @memberof animate\n * @description Update animation nodes.\n *\n */\nconst updateAnimate = function () {\n  const $elems = $_jsElements.not(\".js-animate--intro-art\");\n  let $elem = null;\n  let i = $elems.length;\n\n  for (i; i--;) {\n    $elem = $elems.eq(i);\n\n    if (core.util.isElementVisibleVert($elem[0])) {\n      $elem.addClass(\"is-active\");\n    } else {\n      $elem.removeClass(\"is-active\");\n    }\n  }\n};\n\n/******************************************************************************\n * Export\n*******************************************************************************/\nexports.default = animate;"},"hash":"959a19920e810b3897468ceb697249b5"}