{"dependencies":[{"name":"js_libs/jquery/dist/jquery.js","loc":{"line":1,"column":14}},{"name":"properjs-pagecontroller","loc":{"line":2,"column":27}},{"name":"./core","loc":{"line":3,"column":22}},{"name":"./animate","loc":{"line":6,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _jquery = require(\"js_libs/jquery/dist/jquery.js\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _properjsPagecontroller = require(\"properjs-pagecontroller\");\n\nvar _properjsPagecontroller2 = _interopRequireDefault(_properjsPagecontroller);\n\nvar _core = require(\"./core\");\n\nvar core = _interopRequireWildcard(_core);\n\nvar _animate = require(\"./animate\");\n\nvar _animate2 = _interopRequireDefault(_animate);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @public\n * @namespace router\n * @description Handles async web app routing for nice transitions.\n *\n */\nconst router = {\n  /**\n   *\n   * @public\n   * @method init\n   * @memberof router\n   * @description Initialize the router module.\n   *\n   */\n  init() {\n    this.state = {};\n    this.pageDuration = core.util.getTransitionDuration(core.dom.page[0]);\n    this.bindEmptyHashLinks();\n    this.initPageController();\n\n    // core.log( \"router initialized\" );\n  },\n\n  /**\n   *\n   * @public\n   * @method setState\n   * @memberof router\n   * @param {string} name The access key\n   * @param {mixed} value The storage value\n   * @description Non-persistent state.\n   *              This state object will persist for one router cycle.\n   *              The next router cycle will delete this state object.\n   *\n   */\n  setState(name, value) {\n    this.state[name] = {\n      checked: false,\n      name,\n      value\n    };\n  },\n\n  /**\n   *\n   * @public\n   * @method getState\n   * @memberof router\n   * @param {string} name The access key\n   * @description Access a state object ref by its name.\n   * @returns {mixed}\n   *\n   */\n  getState(name) {\n    let id = null;\n    let ret = null;\n\n    for (id in this.state) {\n      if (this.state.hasOwnProperty(id)) {\n        if (this.state[id].name === name) {\n          ret = this.state[id].value;\n          break;\n        }\n      }\n    }\n\n    return ret;\n  },\n\n  /**\n   *\n   * @public\n   * @method checkState\n   * @memberof router\n   * @description Process state objects.\n   *              Objects that have already been `checked` are deleted.\n   *\n   */\n  checkState() {\n    let id = null;\n\n    for (id in this.state) {\n      if (this.state.hasOwnProperty(id)) {\n        if (this.state[id].checked) {\n          delete this.state[id];\n        } else {\n          this.state[id].checked = true;\n        }\n      }\n    }\n  },\n\n  /**\n   *\n   * @public\n   * @method route\n   * @param {string} path The uri to route to\n   * @memberof router\n   * @description Trigger app to route a specific page. [Reference]{@link https://github.com/ProperJS/Router/blob/master/Router.js#L222}\n   *\n   */\n  route(path) {\n    this.controller.getRouter().trigger(path);\n  },\n\n  /**\n   *\n   * @public\n   * @method push\n   * @param {string} path The uri to route to\n   * @param {function} cb Optional callback to fire\n   * @memberof router\n   * @description Trigger a silent route with a supplied callback.\n   *\n   */\n  push(path, cb) {\n    this.controller.routeSilently(path, cb || core.util.noop);\n    this.checkState();\n  },\n\n  /**\n   *\n   * @public\n   * @method initPageController\n   * @memberof router\n   * @description Create the PageController instance.\n   *\n   */\n  initPageController() {\n    this.controller = new _properjsPagecontroller2.default({\n      transitionTime: this.pageDuration\n    });\n\n    this.controller.setConfig([\"*\"]);\n\n    this.controller.setModules([core.images, _animate2.default]);\n\n    // this.controller.on( \"page-controller-router-samepage\", () => mobileNav.close() );\n    this.controller.on(\"page-controller-router-transition-out\", this.changePageOut.bind(this));\n    this.controller.on(\"page-controller-router-refresh-document\", this.changeContent.bind(this));\n    this.controller.on(\"page-controller-router-transition-in\", this.changePageIn.bind(this));\n    this.controller.on(\"page-controller-initialized-page\", this.initPage.bind(this));\n\n    this.controller.initPage();\n  },\n\n  /**\n   *\n   * @public\n   * @method initPage\n   * @param {string} html The responseText to parse out\n   * @memberof router\n   * @description Cache the initial page load.\n   *\n   */\n  initPage(html) {\n    const cache = this.parseDoc(html);\n\n    this.cachePage(cache.$object, cache.response);\n\n    nav.padPage();\n  },\n\n  /**\n   *\n   * @public\n   * @method parseDoc\n   * @param {string} html The responseText to parse out\n   * @memberof router\n   * @description Get the DOM information to cache for a request.\n   * @returns {object}\n   *\n   */\n  parseDoc(html) {\n    let doc = document.createElement(\"html\");\n\n    doc.innerHTML = html;\n\n    doc = (0, _jquery2.default)(doc);\n\n    return {\n      $object: doc,\n      response: doc.find(\".js-page\")[0].innerHTML\n    };\n  },\n\n  /**\n   *\n   * @public\n   * @method cachePage\n   * @param {Hobo} $object The node for use\n   * @param {string} response The XHR responseText\n   * @memberof router\n   * @description Cache the DOM content for a page once its parsed out.\n   *\n   */\n  cachePage($object, response) {\n    core.cache.set(core.util.getPageKey(), {\n      $object,\n      response\n    });\n  },\n\n  /**\n   *\n   * @public\n   * @method bindEmptyHashLinks\n   * @memberof router\n   * @description Suppress #hash links.\n   *\n   */\n  bindEmptyHashLinks() {\n    core.dom.body.on(\"click\", \"[href^='#']\", e => e.preventDefault());\n  },\n\n  /**\n   *\n   * @public\n   * @method onPreloadDone\n   * @memberof router\n   * @description Finish routing sequence when image pre-loading is done.\n   *\n   */\n  onPreloadDone() {\n    core.util.disableMouseWheel(false);\n    core.util.disableTouchMove(false);\n\n    core.dom.html.removeClass(\"is-routing\");\n    core.dom.page.removeClass(\"is-inactive\");\n\n    core.scrolls.topout(0);\n    core.scrolls.clearStates();\n\n    setTimeout(() => {\n      core.emitter.fire(\"app--intro-art\");\n    }, this.pageDuration);\n\n    core.emitter.off(\"app--preload-done\", this.onPreloadDone);\n  },\n\n  /**\n   *\n   * @public\n   * @method changePageOut\n   * @memberof router\n   * @description Trigger transition-out animation.\n   *\n   */\n  changePageOut() {\n    core.util.disableMouseWheel(true);\n    core.util.disableTouchMove(true);\n\n    core.dom.html.addClass(\"is-routing\");\n    core.dom.page.addClass(\"is-inactive\");\n\n    // setTimeout( () => mobileNav.close(), this.pageDuration );\n\n    core.emitter.on(\"app--preload-done\", this.onPreloadDone);\n  },\n\n  /**\n   *\n   * @public\n   * @method changeContent\n   * @param {string} html The responseText as an HTML string\n   * @memberof router\n   * @description Swap the new content into the DOM.\n   *\n   */\n  changeContent(html) {\n    let cached = core.cache.get(core.util.getPageKey());\n\n    if (!cached) {\n      cached = this.parseDoc(html);\n\n      this.cachePage(cached.$object, cached.response);\n    }\n\n    core.dom.page[0].innerHTML = cached.response;\n\n    core.emitter.fire(\"app--analytics-push\", html, cached.$object);\n\n    // Check state before cycle finishes so `checked` state can be deleted\n    this.checkState();\n  },\n\n  /**\n   *\n   * @public\n   * @method changePageIn\n   * @param {object} data The data object supplied by PageController from PushState\n   * @memberof router\n   * @description Trigger transition-in animation.\n   *\n   */\n  changePageIn(data) {\n    const collection = data.request.uri.split(\"/\")[0];\n\n    // nav.toggleActive( collection );\n  }\n};\n\n/******************************************************************************\n * Export\n*******************************************************************************/\n\n// import nav from \"./menus/nav\";\n// import mobileNav from \"./nav-mobile\";\nexports.default = router;"},"hash":"8b71f296e782f39940c718526a6f755c"}